{"version":3,"sources":["auth/auth-request-api/index.js","auth/index.js","common/jsTPS.js","store/store-request-api/index.js","transactions/MoveItem_Transaction.js","transactions/UpdateItem_Transaction.js","store/index.js","components/EditToolbar.js","components/AppBanner.js","components/MUIDeleteModal.js","components/ListCard.js","components/MenuBar.js","components/HomeScreen.js","components/SplashScreen.js","components/HomeWrapper.js","components/Copyright.js","components/LoginScreen.js","components/RegisterScreen.js","components/Statusbar.js","components/Top5Item.js","components/WorkspaceScreen.js","App.js","reportWebVitals.js","index.js"],"names":["axios","defaults","withCredentials","api","create","baseURL","apis","getLoggedIn","get","registerUser","firstName","lastName","email","password","passwordVerify","post","loginUser","logoutUser","AuthContext","createContext","console","log","AuthActionType","GET_LOGGED_IN","LOGIN_USER","LOGOUT_USER","REGISTER_USER","AuthContextProvider","props","useState","user","loggedIn","auth","setAuth","history","useHistory","useEffect","authReducer","action","type","payload","a","response","status","SET_LOGGED_IN","data","push","getUserInitials","initials","charAt","getUserName","userName","getUserEmail","userEmail","Provider","value","children","jsTPS","this","transactions","numTransactions","mostRecentTransaction","performingDo","performingUndo","length","getSize","transaction","i","splice","doTransaction","hasTransactionToRedo","hasTransactionToUndo","undoTransaction","text","toString","createTop5List","newListName","newItems","name","items","ownerEmail","deleteTop5ListById","id","delete","getTop5ListById","getTop5ListPairs","getTop5ListPairsByUser","getAllTop5Lists","updateTop5ListById","top5List","put","MoveItem_Transaction","initStore","initOldIndex","initNewIndex","store","oldItemIndex","newItemIndex","moveItem","jsTPS_Transaction","UpdateItem_Transaction","initIndex","initOldText","initNewText","index","oldText","newText","updateItem","GlobalStoreContext","GlobalStoreActionType","tps","GlobalStoreContextProvider","idNamePairs","currentList","newListCounter","listNameActive","itemActive","listMarkedForDeletion","allListsArray","viewOpen","setStore","useContext","storeReducer","isListNameEditActive","isItemEditActive","changeListName","newName","updateList","_id","getListPairs","pairsArray","closeCurrentList","clearAllTransactions","createNewList","newList","loadIdNamePairs","loadAllListsArray","loadUserListsArray","userListsArray","searchIdPairs","filteredList","markListForDeletion","deleteList","listToDelete","deleteMarkedList","unmarkListForDeletion","setCurrentList","addMoveItemTransaction","start","end","addTransaction","addUpdateItemTransaction","temp","updateCurrentList","newItem","likeList","likes","dislikeList","newDislikes","dislikes","incrementViews","newViews","views","setViewOpen","view","undo","redo","canUndo","canRedo","setIsListNameEditActive","setIsItemEditActive","EditToolbar","editStatus","Button","disabled","onClick","variant","AppBanner","anchorEl","setAnchorEl","isMenuOpen","Boolean","handleMenuClose","menuId","loggedOutMenu","Menu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","open","onClose","MenuItem","to","loggedInMenu","editToolbar","menu","Box","sx","flexGrow","AppBar","position","Toolbar","Typography","noWrap","component","display","xs","sm","style","textDecoration","color","md","IconButton","size","edge","event","currentTarget","userInitials","getAccountMenu","top","left","transform","width","bgcolor","border","boxShadow","p","MUIDeleteModal","Modal","className","ListCard","editActive","setEditActive","setText","idNamePair","toggleEdit","newActive","stopPropagation","target","substring","selected","cardElement","ListItem","marginTop","button","indexOf","handleLoadList","fontSize","Grid","container","direction","fontFamily","fontWeight","createdAt","slice","handleLikeList","handleDislikeList","handleDeleteList","TextField","margin","required","fullWidth","label","autoComplete","onKeyPress","code","onChange","defaultValue","inputProps","InputLabelProps","autoFocus","Search","styled","theme","borderRadius","shape","backgroundColor","alpha","palette","common","white","marginRight","spacing","marginLeft","breakpoints","up","SearchIconWrapper","padding","height","pointerEvents","alignItems","justifyContent","StyledInputBase","InputBase","paddingLeft","transition","transitions","MenuBar","homeAnchorEl","setHomeAnchorEl","allListsAnchorEl","setAllListsAnchorEl","userListsAnchorEl","setUserListsAnchorEl","comListsAnchorEl","setComListsAnchorEl","isHomeClicked","sortedData","sort","b","Tooltip","title","onKeyDown","key","filter","pair","includes","placeholder","HomeScreen","listCard","List","map","Fab","SplashScreen","underline","onPress","HomeWrapper","Copyright","align","Link","href","Date","getFullYear","LoginScreen","CssBaseline","item","backgroundImage","backgroundRepeat","t","mode","grey","backgroundSize","backgroundPosition","Paper","elevation","square","my","mx","flexDirection","Avatar","m","noValidate","onSubmit","preventDefault","formData","FormData","mt","FormControlLabel","control","Checkbox","mb","RegisterScreen","Container","maxWidth","Statusbar","Top5Item","draggedTo","setDraggedTo","itemClass","onDragStart","targetId","dataTransfer","setData","handleDragStart","onDragOver","handleDragOver","onDragEnter","handleDragEnter","onDragLeave","handleDragLeave","onDrop","sourceId","getData","handleDrop","draggable","WorkspaceScreen","editItems","comments","App","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.248f611b.chunk.js","sourcesContent":["/*\n    This is our http api for all things auth, which we use to\n    send authorization requests to our back-end API. Note we`re\n    using the Axios library for doing this, which is an easy to\n    use AJAX-based library. We could (and maybe should) use Fetch,\n    which is a native (to browsers) standard, but Axios is easier\n    to use when sending JSON back and forth and it`s a Promise-\n    based API which helps a lot with asynchronous communication.\n\n    @author McKilla Gorilla\n*/\n\nimport axios from 'axios'\naxios.defaults.withCredentials = true;\nconst api = axios.create({\n    baseURL: 'http://localhost:4000/auth',\n})\n\n// THESE ARE ALL THE REQUESTS WE`LL BE MAKING, ALL REQUESTS HAVE A\n// REQUEST METHOD (like get) AND PATH (like /register). SOME ALSO\n// REQUIRE AN id SO THAT THE SERVER KNOWS ON WHICH LIST TO DO ITS\n// WORK, AND SOME REQUIRE DATA, WHICH WE WE WILL FORMAT HERE, FOR WHEN\n// WE NEED TO PUT THINGS INTO THE DATABASE OR IF WE HAVE SOME\n// CUSTOM FILTERS FOR QUERIES\n\nexport const getLoggedIn = () => api.get(`/loggedIn/`);\nexport const loginUser = (email, password) => {\n    return api.post(`/login/`, {\n        email : email,\n        password : password\n    })\n}\nexport const logoutUser = () => api.get(`/logout/`)\nexport const registerUser = (firstName, lastName, email, password, passwordVerify) => {\n    return api.post(`/register/`, {\n        firstName : firstName,\n        lastName : lastName,\n        email : email,\n        password : password,\n        passwordVerify : passwordVerify\n    })\n}\nconst apis = {\n    getLoggedIn,\n    registerUser,\n    loginUser,\n    logoutUser\n}\n\nexport default apis\n","import React, { createContext, useEffect, useState } from \"react\";\nimport { useHistory } from 'react-router-dom'\nimport api from './auth-request-api'\n\nconst AuthContext = createContext();\nconsole.log(\"create AuthContext: \" + AuthContext);\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR AUTH STATE THAT CAN BE PROCESSED\nexport const AuthActionType = {\n    GET_LOGGED_IN: \"GET_LOGGED_IN\",\n    LOGIN_USER: \"LOGIN_USER\",\n    LOGOUT_USER: \"LOGOUT_USER\",\n    REGISTER_USER: \"REGISTER_USER\"\n}\n\nfunction AuthContextProvider(props) {\n    const [auth, setAuth] = useState({\n        user: null,\n        loggedIn: false\n    });\n    const history = useHistory();\n\n    useEffect(() => {\n        auth.getLoggedIn();\n    }, []);\n\n    const authReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            case AuthActionType.GET_LOGGED_IN: {\n                return setAuth({\n                    user: payload.user,\n                    loggedIn: payload.loggedIn\n                });\n            }\n            case AuthActionType.LOGIN_USER: {\n                return setAuth({\n                    user: payload.user,\n                    loggedIn: true\n                })\n            }\n            case AuthActionType.LOGOUT_USER: {\n                return setAuth({\n                    user: null,\n                    loggedIn: false\n                })\n            }\n            case AuthActionType.REGISTER_USER: {\n                return setAuth({\n                    user: payload.user,\n                    loggedIn: true\n                })\n            }\n            default:\n                return auth;\n        }\n    }\n\n    auth.getLoggedIn = async function () {\n        const response = await api.getLoggedIn();\n        if (response.status === 200) {\n            authReducer({\n                type: AuthActionType.SET_LOGGED_IN,\n                payload: {\n                    loggedIn: response.data.loggedIn,\n                    user: response.data.user\n                }\n            });\n        }\n    }\n\n    auth.registerUser = async function(firstName, lastName, email, password, passwordVerify) {\n        const response = await api.registerUser(firstName, lastName, email, password, passwordVerify);\n        if (response.status === 200) {\n            authReducer({\n                type: AuthActionType.REGISTER_USER,\n                payload: {\n                    user: response.data.user\n                }\n            })\n            history.push(\"/login\");\n        }\n    }\n\n    auth.loginUser = async function(email, password) {\n        const response = await api.loginUser(email, password);\n        if (response.status === 200) {\n            authReducer({\n                type: AuthActionType.LOGIN_USER,\n                payload: {\n                    user: response.data.user\n                }\n            })\n            history.push(\"/\");\n        }\n    }\n\n    auth.logoutUser = async function() {\n        const response = await api.logoutUser();\n        if (response.status === 200) {\n            authReducer( {\n                type: AuthActionType.LOGOUT_USER,\n                payload: null\n            })\n            history.push(\"/\");\n        }\n    }\n\n    auth.getUserInitials = function() {\n        let initials = \"\";\n        if (auth.user) {\n            initials += auth.user.firstName.charAt(0);\n            initials += auth.user.lastName.charAt(0);\n        }\n        console.log(\"user initials: \" + initials);\n        return initials;\n    }\n\n    auth.getUserName = function() {\n        let userName = \"\";\n        if (auth.user) {\n            userName += auth.user.firstName;\n            userName += \" \";\n            userName += auth.user.lastName;\n        }\n        console.log(\"user name: \" + userName);\n        return userName;\n    }\n\n    auth.getUserEmail = function() {\n        let userEmail = \"\";\n        if (auth.user) {\n            userEmail = auth.user.email;\n        }\n        console.log(\"user email: \" + userEmail);\n        return userEmail;\n    }\n\n    return (\n        <AuthContext.Provider value={{\n            auth\n        }}>\n            {props.children}\n        </AuthContext.Provider>\n    );\n}\n\nexport default AuthContext;\nexport { AuthContextProvider };\n","/**\n * jsTPS_Transaction\n * \n * This provides the basic structure for a transaction class. Note to use\n * jsTPS one should create objects that define these two methods, doTransaction\n * and undoTransaction, which will update the application state accordingly.\n * \n * @author THE McKilla Gorilla (accept no imposters)\n * @version 1.0\n */\nexport class jsTPS_Transaction {\n    /**\n     * This method is called by jTPS when a transaction is executed.\n     */\n    doTransaction() {\n        console.log(\"doTransaction - MISSING IMPLEMENTATION\");\n    }\n    \n    /**\n     * This method is called by jTPS when a transaction is undone.\n     */\n    undoTransaction() {\n        console.log(\"undoTransaction - MISSING IMPLEMENTATION\");\n    }\n}\n\n/**\n * jsTPS\n * \n * This class serves as the Transaction Processing System. Note that it manages\n * a stack of jsTPS_Transaction objects, each of which know how to do or undo\n * state changes for the given application. Note that this TPS is not platform\n * specific as it is programmed in raw JavaScript.\n */\nexport default class jsTPS {\n    constructor() {\n        // THE TRANSACTION STACK\n        this.transactions = [];\n\n        // THE TOTAL NUMBER OF TRANSACTIONS ON THE STACK,\n        // INCLUDING THOSE THAT MAY HAVE ALREADY BEEN UNDONE\n        this.numTransactions = 0;\n\n        // THE INDEX OF THE MOST RECENT TRANSACTION, NOTE THAT\n        // THIS MAY BE IN THE MIDDLE OF THE TRANSACTION STACK\n        // IF SOME TRANSACTIONS ON THE STACK HAVE BEEN UNDONE\n        // AND STILL COULD BE REDONE.\n        this.mostRecentTransaction = -1;\n\n        // THESE STATE VARIABLES ARE TURNED ON AND OFF WHILE\n        // TRANSACTIONS ARE DOING THEIR WORK SO AS TO HELP\n        // MANAGE CONCURRENT UPDATES\n        this.performingDo = false;\n        this.performingUndo = false;\n    }\n\n    /**\n     * isPerformingDo\n     * \n     * Accessor method for getting a boolean representing whether or not\n     * a transaction is currently in the midst of a do/redo operation.\n     */\n    isPerformingDo() {\n        return this.performingDo;\n    }\n\n    /**\n     * isPerformingUndo\n     * \n     * Accessor method for getting a boolean representing whether or not\n     * a transaction is currently in the midst of an undo operation.\n     */\n    isPerformingUndo() {\n        return this.performingUndo;\n    }\n\n    /**\n     * getSize\n     * \n     * Accessor method for getting the number of transactions on the stack.\n     */\n    getSize() {\n        return this.transactions.length;\n    }\n\n    /**\n     * getRedoSize\n     * \n     * Method for getting the total number of transactions on the stack\n     * that can possibly be redone.\n     */\n    getRedoSize() {\n        return this.getSize() - this.mostRecentTransaction - 1;\n    }\n\n    /**\n     * getUndoSize\n     * \n     * Method for getting the total number of transactions on the stack\n     * that can possible be undone.\n     */\n    getUndoSize() {\n        return this.mostRecentTransaction + 1;\n    }\n\n    /**\n     * hasTransactionToRedo\n     * \n     * Method for getting a boolean representing whether or not\n     * there are transactions on the stack that can be redone.\n     */\n    hasTransactionToRedo() {\n        return (this.mostRecentTransaction+1) < this.numTransactions;\n    }\n\n    /**\n     * hasTransactionToUndo\n     * \n     * Method for getting a boolean representing whehter or not\n     * there are transactions on the stack that can be undone.\n     */\n    hasTransactionToUndo() {\n        return this.mostRecentTransaction >= 0;\n    }\n\n    /**\n     * addTransaction\n     * \n     * Method for adding a transaction to the TPS stack, note it\n     * also then does the transaction.\n     * \n     * @param {jsTPS_Transaction} transaction Transaction to add to the stack and do.\n     */\n    addTransaction(transaction) {\n        // ARE WE BRANCHING?\n        if ((this.mostRecentTransaction < 0) \n            || (this.mostRecentTransaction < (this.transactions.length - 1))) {\n                for (let i = this.transactions.length - 1; i > this.mostRecentTransaction; i--) {\n                    this.transactions.splice(i, 1);\n                }\n                this.numTransactions = this.mostRecentTransaction + 2;\n        }\n        else {\n            this.numTransactions++;\n        }\n\n        // ADD THE TRANSACTION\n        this.transactions[this.mostRecentTransaction+1] = transaction;\n\n        // AND EXECUTE IT\n        this.doTransaction();\n    }\n\n    /**\n     * doTransaction\n     * \n     * Does the current transaction on the stack and advances the transaction\n     * counter. Note this function may be invoked as a result of either adding\n     * a transaction (which also does it), or redoing a transaction.\n     */\n    doTransaction() {\n        if (this.hasTransactionToRedo()) {\n            this.performingDo = true;\n            let transaction = this.transactions[this.mostRecentTransaction+1];\n            transaction.doTransaction();\n            this.mostRecentTransaction++;\n            this.performingDo = false;\n        }\n    }\n\n    /**\n     * This function gets the most recently executed transaction on the \n     * TPS stack and undoes it, moving the TPS counter accordingly.\n     */\n    undoTransaction() {\n        if (this.hasTransactionToUndo()) {\n            this.performingUndo = true;\n            let transaction = this.transactions[this.mostRecentTransaction];\n            transaction.undoTransaction();\n            this.mostRecentTransaction--;\n            this.performingUndo = false;\n        }\n    }\n\n    /**\n     * clearAllTransactions\n     * \n     * Removes all the transactions from the TPS, leaving it with none.\n     */\n    clearAllTransactions() {\n        // REMOVE ALL THE TRANSACTIONS\n        this.transactions = [];\n        \n        // MAKE SURE TO RESET THE LOCATION OF THE\n        // TOP OF THE TPS STACK TOO\n        this.mostRecentTransaction = -1;      \n        this.numTransactions = 0; \n    }\n\n    /**\n     * toString\n     * \n     * Builds and returns a textual represention of the full TPS and its stack.\n     */\n    toString() {        \n        let text = \"--Number of Transactions: \" + this.numTransactions + \"\\n\";\n        text += \"--Current Index on Stack: \" + this.mostRecentTransaction + \"\\n\";\n        text += \"--Current Transaction Stack:\\n\";\n        for (let i = 0; i <= this.mostRecentTransaction; i++) {\n            let jT = this.transactions[i];\n            text += \"----\" + jT.toString() + \"\\n\";\n        }\n        return text;        \n    }\n}","/*\n    This is our http api, which we use to send requests to\n    our back-end API. Note we`re using the Axios library\n    for doing this, which is an easy to use AJAX-based\n    library. We could (and maybe should) use Fetch, which\n    is a native (to browsers) standard, but Axios is easier\n    to use when sending JSON back and forth and it`s a Promise-\n    based API which helps a lot with asynchronous communication.\n\n    @author McKilla Gorilla\n*/\n\nimport axios from 'axios'\naxios.defaults.withCredentials = true;\nconst api = axios.create({\n    baseURL: 'http://localhost:4000/api',\n})\n\n// THESE ARE ALL THE REQUESTS WE`LL BE MAKING, ALL REQUESTS HAVE A\n// REQUEST METHOD (like get) AND PATH (like /top5list). SOME ALSO\n// REQUIRE AN id SO THAT THE SERVER KNOWS ON WHICH LIST TO DO ITS\n// WORK, AND SOME REQUIRE DATA, WHICH WE WE WILL FORMAT HERE, FOR WHEN\n// WE NEED TO PUT THINGS INTO THE DATABASE OR IF WE HAVE SOME\n// CUSTOM FILTERS FOR QUERIES\nexport const createTop5List = (newListName, newItems, userEmail) => {\n    return api.post(`/top5list/`, {\n        // SPECIFY THE PAYLOAD\n        name: newListName,\n        items: newItems,\n        ownerEmail: userEmail\n    })\n}\nexport const deleteTop5ListById = (id) => api.delete(`/top5list/${id}`)\nexport const getTop5ListById = (id) => api.get(`/top5list/${id}`)\nexport const getTop5ListPairs = () => api.get(`/top5listpairs`)\nexport const getTop5ListPairsByUser = (user) => api.get(`/top5listpairs/${user}`)\nexport const getAllTop5Lists = () => api.get('/alltop5lists')\n\nexport const updateTop5ListById = (id, top5List) => {\n    return api.put(`/top5list/${id}`, {\n        // SPECIFY THE PAYLOAD\n        top5List : top5List\n    })\n}\n\nexport const likeTop5List = (id) => api.put('/top5list/like/${id}')\n\nexport const dislikeTop5List = (id) => {\n    return api.put('/top5list/dislike/${id}')\n}\n\nconst apis = {\n    createTop5List,\n    deleteTop5ListById,\n    getTop5ListById,\n    getTop5ListPairs,\n    getTop5ListPairsByUser,\n    getAllTop5Lists,\n    updateTop5ListById\n}\n\nexport default apis\n","import jsTPS_Transaction from \"../common/jsTPS.js\"\n/**\n * MoveItem_Transaction\n * \n * This class represents a transaction that works with drag\n * and drop. It will be managed by the transaction stack.\n    \n    @author McKilla Gorilla\n */\nexport default class MoveItem_Transaction extends jsTPS_Transaction {\n    constructor(initStore, initOldIndex, initNewIndex) {\n        super();\n        this.store = initStore;\n        this.oldItemIndex = initOldIndex;\n        this.newItemIndex = initNewIndex;\n    }\n\n    doTransaction() {\n        this.store.moveItem(this.oldItemIndex, this.newItemIndex);\n    }\n    \n    undoTransaction() {\n        this.store.moveItem(this.newItemIndex, this.oldItemIndex);\n    }\n}","import jsTPS_Transaction from \"../common/jsTPS.js\"\n\n/**\n * UpdateItem_Transaction\n * \n * This class represents a transaction that updates the text\n * for a given item. It will be managed by the transaction stack.\n    \n    @author McKilla Gorilla\n */\nexport default class UpdateItem_Transaction extends jsTPS_Transaction {\n    constructor(initStore, initIndex, initOldText, initNewText) {\n        super();\n        this.store = initStore;\n        this.index = initIndex;\n        this.oldText = initOldText;\n        this.newText = initNewText;\n    }\n\n    doTransaction() {\n        this.store.updateItem(this.index, this.newText);\n    }\n    \n    undoTransaction() {\n        this.store.updateItem(this.index, this.oldText);\n    }\n}","import { createContext, useContext, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport jsTPS from '../common/jsTPS'\nimport api from './store-request-api'\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction'\nimport UpdateItem_Transaction from '../transactions/UpdateItem_Transaction'\nimport AuthContext from '../auth'\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers.\n\n    @author McKilla Gorilla\n*/\n\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\nexport const GlobalStoreContext = createContext({});\nconsole.log(\"create GlobalStoreContext\");\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    UNMARK_LIST_FOR_DELETION: \"UNMARK_LIST_FOR_DELETION\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_ITEM_EDIT_ACTIVE: \"SET_ITEM_EDIT_ACTIVE\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    LIKE_LIST: \"LIKE_LIST\",\n    DISLIKE_LIST: \"DISLIKE_LIST\",\n    SET_VIEW_OPEN: \"SET_VIEW_OPEN\",\n    CHANGE_LIST_VIEWS: \"CHANGE_LIST_VIEWS\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nfunction GlobalStoreContextProvider(props) {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        itemActive: false,\n        listMarkedForDeletion: null,\n        allListsArray: [],\n        viewOpen: null\n    });\n    const history = useHistory();\n\n    console.log(\"inside useGlobalStore\");\n\n    // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n    const { auth } = useContext(AuthContext);\n    console.log(\"auth: \" + auth);\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            case GlobalStoreActionType.SET_VIEW_OPEN: {\n                console.log(payload)\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    allListsArray: store.allListsArray,\n                    viewOpen: payload\n                });\n            }\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    allListsArray: store.allListsArray,\n                    viewOpen: store.viewOpen\n                });\n            }\n            case GlobalStoreActionType.CHANGE_LIST_VIEWS: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.top5List,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    allListsArray: store.allListsArray,\n                    viewOpen: store.viewOpen\n                });\n            }\n            // LIST UPDATE Of ITS LIKES\n            case GlobalStoreActionType.LIKE_LIST: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    allListsArray: store.allListsArray,\n                    viewOpen: store.viewOpen\n                });\n            }\n            // LIST UPDATE OF ITS DISLIKES\n            case GlobalStoreActionType.DISLIKE_LIST: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    allListsArray: store.allListsArray,\n                    viewOpen: store.viewOpen\n                });\n            }\n\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    allListsArray: store.allListsArray,\n                    viewOpen: store.viewOpen\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    allListsArray: store.allListsArray,\n                    viewOpen: store.viewOpen\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    allListsArray: store.allListsArray,\n                    viewOpen: store.viewOpen\n                });\n            }\n            // GET ALL THE LISTS OF A CERTAIN USER\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: payload,\n                    allListsArray: store.allListsArray,\n                    viewOpen: store.viewOpen\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    allListsArray: store.allListsArray,\n                    viewOpen: store.viewOpen\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    allListsArray: store.allListsArray,\n                    viewOpen: store.viewOpen\n                });\n            }\n            // START EDITING A LIST ITEM\n            case GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: true,\n                    listMarkedForDeletion: null,\n                    allListsArray: store.allListsArray,\n                    viewOpen: store.viewOpen\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: true,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    allListsArray: store.allListsArray,\n                    viewOpen: store.viewOpen\n                });\n            }\n            default:\n                return store;\n        }\n    }\n\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN\n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = async function (id, newName) {\n        let response = await api.getTop5ListById(id);\n        if (response.status === 200) {\n            let top5List = response.data.top5List;\n            top5List.name = newName;\n            async function updateList(top5List) {\n                response = await api.updateTop5ListById(top5List._id, top5List);\n                if (response.status === 200) {\n                    async function getListPairs(top5List) {\n                        response = await api.getTop5ListPairs();\n                        if (response.status === 200) {\n                            let pairsArray = response.data.idNamePairs;\n                            storeReducer({\n                                type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                payload: {\n                                    idNamePairs: pairsArray,\n                                    top5List: top5List\n                                }\n                            });\n                        }\n                    }\n                    getListPairs(top5List);\n                }\n            }\n            updateList(top5List);\n        }\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n\n        tps.clearAllTransactions();\n        history.push(\"/\");\n    }\n\n    // THIS FUNCTION CREATES A NEW LIST\n    store.createNewList = async function () {\n        let newListName = \"Untitled\" + store.newListCounter;\n        const response = await api.createTop5List(newListName, [\"?\", \"?\", \"?\", \"?\", \"?\"], auth.user.email);\n        console.log(\"createNewList response: \" + response);\n        if (response.status === 201) {\n            tps.clearAllTransactions();\n            let newList = response.data.top5List;\n            storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: newList\n            }\n            );\n\n            // IF IT'S A VALID LIST THEN LET'S START EDITING IT\n            history.push(\"/top5list/\" + newList._id);\n        }\n        else {\n            console.log(\"API FAILED TO CREATE A NEW LIST\");\n        }\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = async function () {\n        console.log(\"store.loadIdNamePairs\");\n        const response = await api.getTop5ListPairs();\n        if (response.status === 200) {\n            let pairsArray = response.data.idNamePairs;\n            storeReducer({\n                type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                payload: pairsArray\n            });\n        }\n        else {\n            console.log(\"API FAILED TO GET THE LIST PAIRS\");\n        }\n    }\n\n    store.loadAllListsArray = async function () {\n        console.log(\"store.loadAllListsArray\");\n        const response = await api.getAllTop5Lists();\n        if (response.status === 200) {\n            let allListsArray = response.data.allListsArray;\n            console.log(allListsArray)\n            storeReducer({\n                type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                payload: allListsArray\n            });\n        }\n        else {\n            console.log(\"API FAILED TO GET THE LIST PAIRS\");\n        }\n    }\n\n    store.loadUserListsArray = async function (user) {\n        console.log(\"store.loadUserListsArray\");\n        const response = await api.getTop5ListPairsByUser(user);\n        if (response){\n            if (response.status === 200) {\n                let userListsArray = response.data.userListsArray;\n                console.log(userListsArray)\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: userListsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }else{\n            console.log(\"testing\")\n            storeReducer({\n                type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                payload: []\n            });\n        }\n    }\n\n    store.searchIdPairs = async function (filteredList) {\n        console.log(\"store.searchIdPairs\");\n        storeReducer({\n            type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n            payload: filteredList\n        });\n    }\n\n    // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n    // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n    // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n    // showDeleteListModal, and hideDeleteListModal\n    store.markListForDeletion = async function (id) {\n        // GET THE LIST\n        let response = await api.getTop5ListById(id);\n        if (response.status === 200) {\n            let top5List = response.data.top5List;\n            storeReducer({\n                type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                payload: top5List\n            });\n        }\n    }\n\n    store.deleteList = async function (listToDelete) {\n        let response = await api.deleteTop5ListById(listToDelete._id);\n        if (response.status === 200) {\n            store.loadIdNamePairs();\n            history.push(\"/\");\n        }\n    }\n\n    store.deleteMarkedList = function () {\n        store.deleteList(store.listMarkedForDeletion);\n    }\n\n    store.unmarkListForDeletion = function () {\n        storeReducer({\n            type: GlobalStoreActionType.UNMARK_LIST_FOR_DELETION,\n            payload: null\n        });\n    }\n\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n    // moveItem, updateItem, updateCurrentList, undo, and redo\n    store.setCurrentList = async function (id) {\n        let response = await api.getTop5ListById(id);\n        if (response.status === 200) {\n            let top5List = response.data.top5List;\n\n            response = await api.updateTop5ListById(top5List._id, top5List);\n            if (response.status === 200) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: top5List\n                });\n                history.push(\"/top5list/\" + top5List._id);\n            }\n        }\n    }\n\n    store.addMoveItemTransaction = function (start, end) {\n        let transaction = new MoveItem_Transaction(store, start, end);\n        tps.addTransaction(transaction);\n    }\n\n    store.addUpdateItemTransaction = function (index, newText) {\n        let oldText = store.currentList.items[index];\n        let transaction = new UpdateItem_Transaction(store, index, oldText, newText);\n        tps.addTransaction(transaction);\n    }\n\n    store.moveItem = function (start, end) {\n        start -= 1;\n        end -= 1;\n        if (start < end) {\n            let temp = store.currentList.items[start];\n            for (let i = start; i < end; i++) {\n                store.currentList.items[i] = store.currentList.items[i + 1];\n            }\n            store.currentList.items[end] = temp;\n        }\n        else if (start > end) {\n            let temp = store.currentList.items[start];\n            for (let i = start; i > end; i--) {\n                store.currentList.items[i] = store.currentList.items[i - 1];\n            }\n            store.currentList.items[end] = temp;\n        }\n\n        // NOW MAKE IT OFFICIAL\n        store.updateCurrentList();\n    }\n\n    store.updateItem = function (index, newItem) {\n        store.currentList.items[index] = newItem;\n        store.updateCurrentList();\n    }\n\n    store.updateCurrentList = async function () {\n        const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n        if (response.status === 200) {\n            storeReducer({\n                type: GlobalStoreActionType.SET_CURRENT_LIST,\n                payload: store.currentList\n            });\n        }\n    }\n\n    store.likeList = async function (id) {\n        console.log(id);\n        let response = await api.getTop5ListById(id);\n        if (response.status === 200) {\n            let top5List = response.data.top5List;\n            top5List.likes += 1;\n            async function updateList(top5List) {\n                response = await api.updateTop5ListById(top5List._id, top5List);\n                if (response.status === 200) {\n                    async function getListPairs(top5List) {\n                        response = await api.getTop5ListPairs();\n                        if (response.status === 200) {\n                            let pairsArray = response.data.idNamePairs;\n                            storeReducer({\n                                type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                payload: {\n                                    idNamePairs: pairsArray,\n                                    top5List: top5List\n                                }\n                            });\n                        }\n                    }\n                    getListPairs(top5List);\n                }\n            }\n            updateList(top5List);\n        }\n    }\n\n    store.dislikeList = async function (id) {\n        let response = await api.getTop5ListById(id);\n        if (response.status === 200) {\n            let top5List = response.data.top5List;\n            let newDislikes = top5List.dislikes;\n            newDislikes += 1;\n            top5List.dislikes = newDislikes;\n            async function updateList(top5List) {\n                response = await api.updateTop5ListById(top5List._id, top5List);\n                if (response.status === 200) {\n                    async function getListPairs(top5List) {\n                        response = await api.getTop5ListPairs();\n                        if (response.status === 200) {\n                            let pairsArray = response.data.idNamePairs;\n                            storeReducer({\n                                type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                payload: {\n                                    idNamePairs: pairsArray,\n                                    top5List: top5List\n                                }\n                            });\n                        }\n                    }\n                    getListPairs(top5List);\n                }\n            }\n            updateList(top5List);\n        }\n    }\n\n    store.incrementViews = async function(id) {\n        let response = await api.getTop5ListById(id);\n        if (response.status === 200) {\n            let top5List = response.data.top5List;\n            let newViews = top5List.views;\n            newViews += 1;\n            top5List.views = newViews;\n            async function updateList(top5List) {\n                response = await api.updateTop5ListById(top5List._id, top5List);\n                if (response.status === 200) {\n                    async function getListPairs(top5List) {\n                        response = await api.getTop5ListPairs();\n                        if (response.status === 200) {\n                            let pairsArray = response.data.idNamePairs;\n                            storeReducer({\n                                type: GlobalStoreActionType.CHANGE_LIST_VIEWS,\n                                payload: {\n                                    idNamePairs: pairsArray,\n                                    top5List: top5List\n                                }\n                            });\n                        }\n                    }\n                    getListPairs(top5List);\n                }\n            }\n            updateList(top5List);\n        }\n}\n\n    store.setViewOpen = function (view) {\n        console.log(\"store.setViewOpen\")\n        console.log(view)\n        storeReducer({\n            type: GlobalStoreActionType.SET_VIEW_OPEN,\n            payload: view\n        });\n    }\n\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    store.canUndo = function() {\n        return tps.hasTransactionToUndo();\n    }\n\n    store.canRedo = function() {\n        return tps.hasTransactionToRedo();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setIsListNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING AN ITEM\n    store.setIsItemEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    return (\n        <GlobalStoreContext.Provider value={{\n            store\n        }}>\n            {props.children}\n        </GlobalStoreContext.Provider>\n    );\n}\n\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };\n","import { useContext } from 'react'\nimport { GlobalStoreContext } from '../store'\nimport Button from '@mui/material/Button';\nimport CloseIcon from '@mui/icons-material/HighlightOff';\nimport RedoIcon from '@mui/icons-material/Redo';\nimport UndoIcon from '@mui/icons-material/Undo';\nimport HomeIcon from '@mui/icons-material/Home';\nimport PersonOutlineIcon from '@mui/icons-material/PersonOutline';\nimport GroupIcon from '@mui/icons-material/Group';\nimport SvgIcon from '@mui/material/SvgIcon';\nimport SortIcon from '@mui/icons-material/Sort';\nimport Menu from '@mui/material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\n\n/*\n    This toolbar is a functional React component that\n    manages the undo/redo/close buttons.\n\n    @author McKilla Gorilla\n*/\nfunction EditToolbar() {\n    const { store } = useContext(GlobalStoreContext);\n\n    let enabledButtonClass = \"top5-button\";\n    function handleUndo() {\n        store.undo();\n    }\n    function handleRedo() {\n        store.redo();\n    }\n    function handleClose() {\n        store.closeCurrentList();\n    }\n    function handleUser() {\n\n    }\n\n    let editStatus = false;\n    if (store.isListNameEditActive) {\n        editStatus = true;\n    }\n    console.log(\"canUndo: \" + store.canUndo());\n    return (\n        <div id=\"edit-toolbar\">\n            <Button\n                disabled={!store.canUndo()}\n                id='undo-button'\n                onClick={handleUndo}\n                variant=\"contained\">\n                    <UndoIcon />\n            </Button>\n            <Button\n                disabled={!store.canRedo()}\n                id='redo-button'\n                onClick={handleRedo}\n                variant=\"contained\">\n                    <RedoIcon />\n            </Button>\n            <Button\n                disabled={editStatus}\n                id='close-button'\n                onClick={handleClose}\n                variant=\"contained\">\n                    <CloseIcon />\n            </Button>\n        </div>\n    )\n}\n\nexport default EditToolbar;\n","import { useContext, useState } from 'react';\nimport { Link } from 'react-router-dom'\nimport AuthContext from '../auth';\nimport { GlobalStoreContext } from '../store'\n\nimport EditToolbar from './EditToolbar'\n\nimport AccountCircle from '@mui/icons-material/AccountCircle';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport IconButton from '@mui/material/IconButton';\nimport Menu from '@mui/material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\n\nexport default function AppBanner() {\n    const { auth } = useContext(AuthContext);\n    const { store } = useContext(GlobalStoreContext);\n    const [anchorEl, setAnchorEl] = useState(null);\n    const isMenuOpen = Boolean(anchorEl);\n\n    const handleProfileMenuOpen = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleMenuClose = () => {\n        setAnchorEl(null);\n    };\n\n    const handleLogout = () => {\n        handleMenuClose();\n        auth.logoutUser();\n    }\n\n    const menuId = 'primary-search-account-menu';\n    const loggedOutMenu = (\n        <Menu\n            anchorEl={anchorEl}\n            anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            id={menuId}\n            keepMounted\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            open={isMenuOpen}\n            onClose={handleMenuClose}\n        >\n            <MenuItem onClick={handleMenuClose}><Link to='/login/'>Login</Link></MenuItem>\n            <MenuItem onClick={handleMenuClose}><Link to='/register/'>Create New Account</Link></MenuItem>\n        </Menu>\n    );\n    const loggedInMenu =\n        <Menu\n            anchorEl={anchorEl}\n            anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            id={menuId}\n            keepMounted\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            open={isMenuOpen}\n            onClose={handleMenuClose}\n        >\n            <MenuItem onClick={handleLogout}>Logout</MenuItem>\n        </Menu>\n\n    let editToolbar = \"\";\n    let menu = loggedOutMenu;\n    if (auth.loggedIn) {\n        menu = loggedInMenu;\n        if (store.currentList) {\n            editToolbar = <EditToolbar />;\n        }\n    }\n\n    function getAccountMenu(loggedIn) {\n        let userInitials = auth.getUserInitials();\n        console.log(\"userInitials: \" + userInitials);\n        if (loggedIn)\n            return <div>{userInitials}</div>;\n        else\n            return <AccountCircle />;\n    }\n\n    return (\n        <Box sx={{ flexGrow: 1 }}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography\n                        variant=\"h4\"\n                        noWrap\n                        component=\"div\"\n                        sx={{ display: { xs: 'none', sm: 'block' } }}\n                    >\n                        <Link style={{ textDecoration: 'none', color: 'white' }} to='/'>T<sup>5</sup>L</Link>\n                    </Typography>\n                    <Box sx={{ flexGrow: 1 }}>{editToolbar}</Box>\n                    <Box sx={{ display: { xs: 'none', md: 'flex' } }}>\n                        <IconButton\n                            size=\"large\"\n                            edge=\"end\"\n                            aria-label=\"account of current user\"\n                            aria-controls={menuId}\n                            aria-haspopup=\"true\"\n                            onClick={handleProfileMenuOpen}\n                            color=\"inherit\"\n                        >\n                            { getAccountMenu(auth.loggedIn) }\n                        </IconButton>\n                    </Box>\n                </Toolbar>\n            </AppBar>\n            {\n                menu\n            }\n        </Box>\n    );\n}\n","import { useContext } from 'react'\nimport GlobalStoreContext from '../store';\nimport * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Modal from '@mui/material/Modal';\n\nconst style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 400,\n    bgcolor: 'background.paper',\n    border: '2px solid #000',\n    boxShadow: 24,\n    p: 4,\n};\n\nexport default function MUIDeleteModal() {\n    const { store } = useContext(GlobalStoreContext);\n    let name = \"\";\n    if (store.listMarkedForDeletion) {\n        name = store.listMarkedForDeletion.name;\n    }\n    function handleDeleteList(event) {\n        store.deleteMarkedList();\n    }\n    function handleCloseModal(event) {\n        store.unmarkListForDeletion();\n    }\n\n    return (\n        <Modal\n            open={store.listMarkedForDeletion !== null}\n        >\n            <Box sx={style}>\n                <div className=\"modal-dialog\">\n                <header className=\"dialog-header\">\n                    Delete the {name} Top 5 List?\n                </header>\n                <div id=\"confirm-cancel-container\">\n                    <button\n                        id=\"dialog-yes-button\"\n                        className=\"modal-button\"\n                        onClick={handleDeleteList}\n                    >Confirm</button>\n                    <button\n                        id=\"dialog-no-button\"\n                        className=\"modal-button\"\n                        onClick={handleCloseModal}\n                    >Cancel</button>\n                </div>\n            </div>\n            </Box>\n        </Modal>\n    );\n}","import { useContext, useState } from 'react'\nimport { GlobalStoreContext } from '../store'\nimport AuthContext from '../auth';\nimport Box from '@mui/material/Box';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport IconButton from '@mui/material/IconButton';\nimport ListItem from '@mui/material/ListItem';\nimport TextField from '@mui/material/TextField';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport ThumbDownIcon from '@mui/icons-material/ThumbDown';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport Grid from '@mui/material/Grid';\n\n/*\n    This is a card in our list of top 5 lists. It lets select\n    a list for editing and it has controls for changing its\n    name or deleting it.\n\n    @author McKilla Gorilla\n*/\nfunction ListCard(props) {\n    const { store } = useContext(GlobalStoreContext);\n    const { auth } = useContext(AuthContext);\n    const [editActive, setEditActive] = useState(false);\n    const [text, setText] = useState(\"\");\n    const { idNamePair, selected } = props;\n    // function to load a list\n    function handleLoadList(event, id) {\n        console.log(\"handleLoadList for \" + id);\n        if (!event.target.disabled) {\n            let _id = event.target.id;\n            if (_id.indexOf('list-card-text-') >= 0)\n                _id = (\"\" + _id).substring(\"list-card-text-\".length);\n\n            console.log(\"load \" + _id);\n\n            // CHANGE THE CURRENT LIST\n            store.setCurrentList(id);\n            console.log(store.currentList);\n        }\n        store.incrementViews(id);\n        console.log(store.currentList);\n    }\n    // handler: toggle function to see if editing is active\n    function handleToggleEdit(event) {\n        event.stopPropagation();\n        toggleEdit();\n    }\n    // toggle function to see if editing is active\n    function toggleEdit() {\n        let newActive = !editActive;\n        if (newActive) {\n            store.setIsListNameEditActive();\n        }\n        setEditActive(newActive);\n    }\n\n    function handleUserClick() {\n\n    }\n    // function to show modal on delete list\n    async function handleDeleteList(event, id) {\n        event.stopPropagation();\n        let _id = event.target.id;\n        _id = (\"\" + _id).substring(\"delete-list-\".length);\n        store.markListForDeletion(id);\n    }\n    // like a list function\n    async function handleLikeList(event, id) {\n        event.stopPropagation();\n        store.likeList(id);\n    }\n    // dislike a list funciton\n    async function handleDislikeList(event, id) {\n        event.stopPropagation();\n        store.dislikeList(id);\n    }\n    // handle enter on edit state and updating text\n    function handleKeyPress(event) {\n        if (event.code === \"Enter\") {\n            let id = event.target.id.substring(\"list-\".length);\n            store.changeListName(id, event.target.value);\n            toggleEdit();\n        }\n    }\n    function handleUpdateText(event) {\n        setText(event.target.value);\n    }\n\n    // card status functions\n    let selectClass = \"unselected-list-card\";\n    if (selected) {\n        selectClass = \"selected-list-card\";\n    }\n    let cardStatus = false;\n    if (store.isListNameEditActive) {\n        cardStatus = true;\n    }\n    let cardElement =\n        <ListItem\n            id={idNamePair._id}\n            key={idNamePair._id}\n            sx={{ marginTop: '0px', display: 'flex', p: 1 }}\n            style={{ width: '100%'}}\n            button\n            onClick={(event) => {\n                handleLoadList(event, idNamePair._id)\n            }\n            }\n            style={{\n                 fontSize: '48pt'\n            }}\n        >\n                <Grid container direction={'column'}>\n                    <Box sx={{ fontFamily: '-apple-system', p: 1, fontWeight: 'bold', fontSize: 20, flexGrow: 1 }}>{idNamePair.name}</Box>\n                    <Grid container direction={'row'}>\n                        <Box sx={{ fontFamily: '-apple-system', fontWeight: 'bold', fontSize: 12, p: 1, flexGrow: .5 }}>By:</Box>\n                        <Box sx={{ fontFamily: '-apple-system', textDecoration: 'underline', color : 'blue', fontWeight: 'bold', fontSize: 12, p: 1, flexGrow: 100 }}>{idNamePair.ownerEmail}</Box>\n                    </Grid>\n                    {idNamePair.ownerEmail == auth.user.email ?\n                        <Box onClick={handleToggleEdit} sx={{ fontFamily: '-apple-system', textDecoration: 'underline', color : 'red', fontWeight: 'bold', fontSize: 12, p: 1, flexGrow: 1 }}>Edit:</Box> :\n                        <Box sx={{ fontFamily: '-apple-system', color : 'black', fontWeight: 'bold', fontSize: 12, p: 1, flexGrow: 1 }}>Published: {idNamePair.createdAt.slice(0,9)}</Box>\n                    }\n                    <Grid container direction={'row'}>\n                        <Box sx={{ fontFamily: '-apple-system', fontWeight: 'bold', fontSize: 12, p: 1, flexGrow: 0 }}>Views:</Box>\n                        <Box sx={{ fontFamily: '-apple-system', fontWeight: 'bold', fontSize: 12, p:1, flexGrow: 100 }}>{idNamePair.views}</Box>\n                    </Grid>\n                </Grid>\n\n\n                <Box sx={{ p: 0 }}>\n                    <IconButton onClick={(event) => {\n                        handleLikeList(event, idNamePair._id)\n                    }} aria-label='like'>\n                        <ThumbUpIcon style={{fontSize:'30pt'}} />\n                    </IconButton>\n                </Box>\n                <Box sx={{ fontFamily: '-apple-system', p: 1, fontWeight: 'bold', fontSize: 15, flexGrow: 1 }}>{idNamePair.likes}</Box>\n                <Box sx={{ p: 1 }}>\n                    <IconButton onClick={(event) => {\n                        handleDislikeList(event, idNamePair._id)\n                    }} aria-label='dislike'>\n                        <ThumbDownIcon style={{fontSize:'30pt'}} />\n                    </IconButton>\n                </Box>\n                <Box sx={{ fontFamily: '-apple-system', p: 1, fontWeight: 'bold', fontSize: 15, flexGrow: 1 }}>{idNamePair.dislikes}</Box>\n                <Box sx={{ p: 1 }}>\n                    <IconButton onClick={(event) => {\n                        handleDeleteList(event, idNamePair._id)\n                    }} aria-label='delete'>\n                        <DeleteIcon style={{fontSize:'30pt'}} />\n                    </IconButton>\n                </Box>\n        </ListItem>\n\n    if (editActive) {\n        cardElement =\n            <TextField\n                margin=\"normal\"\n                required\n                fullWidth\n                id={\"list-\" + idNamePair._id}\n                label=\"Top 5 List Name\"\n                name=\"name\"\n                autoComplete=\"Top 5 List Name\"\n                className='list-card'\n                onKeyPress={handleKeyPress}\n                onChange={handleUpdateText}\n                defaultValue={idNamePair.name}\n                inputProps={{style: {fontSize: 48}}}\n                InputLabelProps={{style: {fontSize: 24}}}\n                autoFocus\n            />\n    }\n    return (\n        cardElement\n    );\n}\n\nexport default ListCard;\n","import { useContext, useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom'\nimport AuthContext from '../auth';\nimport { GlobalStoreContext } from '../store'\nimport { styled, alpha } from '@mui/material/styles';\n\nimport EditToolbar from './EditToolbar'\n\nimport InputBase from '@mui/material/InputBase';\nimport AccountCircle from '@mui/icons-material/AccountCircle';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport IconButton from '@mui/material/IconButton';\nimport Menu from '@mui/material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport CloseIcon from '@mui/icons-material/HighlightOff';\nimport RedoIcon from '@mui/icons-material/Redo';\nimport UndoIcon from '@mui/icons-material/Undo';\nimport HomeIcon from '@mui/icons-material/Home';\nimport PersonOutlineIcon from '@mui/icons-material/PersonOutline';\nimport GroupIcon from '@mui/icons-material/Group';\nimport SvgIcon from '@mui/material/SvgIcon';\nimport SortIcon from '@mui/icons-material/Sort';\nimport FunctionsIcon from '@mui/icons-material/Functions';\nimport SearchIcon from '@mui/icons-material/Search';\nimport Tooltip from '@mui/material/Tooltip';\n\nconst Search = styled('div')(({ theme }) => ({\n  position: 'relative',\n  borderRadius: theme.shape.borderRadius,\n  backgroundColor: alpha(theme.palette.common.white, 0.15),\n  '&:hover': {\n    backgroundColor: alpha(theme.palette.common.white, 0.25),\n  },\n  marginRight: theme.spacing(2),\n  marginLeft: 0,\n  width: '100%',\n  [theme.breakpoints.up('sm')]: {\n    marginLeft: theme.spacing(3),\n    width: 'auto',\n  },\n}));\n\nconst SearchIconWrapper = styled('div')(({ theme }) => ({\n  padding: theme.spacing(0, 2),\n  height: '100%',\n  position: 'absolute',\n  pointerEvents: 'none',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n}));\n\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\n  color: 'inherit',\n  '& .MuiInputBase-input': {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('md')]: {\n      width: '20ch',\n    },\n  },\n}));\n\nexport default function MenuBar() {\n    const { auth } = useContext(AuthContext);\n    const { store } = useContext(GlobalStoreContext);\n    const [anchorEl, setAnchorEl] = useState(null);\n    const [homeAnchorEl, setHomeAnchorEl] = useState(null);\n    const [allListsAnchorEl, setAllListsAnchorEl] = useState(null);\n    const [userListsAnchorEl, setUserListsAnchorEl] = useState(null);\n    const [comListsAnchorEl, setComListsAnchorEl] = useState(null);\n    const [viewOpen, setViewOpen] = useState(null);\n    const isMenuOpen = Boolean(anchorEl);\n    const isHomeClicked = Boolean(homeAnchorEl);\n    const isAllListsClicked = Boolean(allListsAnchorEl);\n    const isUserListsClicked = Boolean(userListsAnchorEl);\n    const isComListsClicked = Boolean(comListsAnchorEl);\n    const [hover, setHover] = useState(false);\n    const onHover = () => {\n        setHover(true);\n    };\n    const onLeave = () => {\n      setHover(false);\n    };\n    useEffect(() => {\n        setViewOpen(\"yourListsView\");\n    },[]);\n\n    // handleMenuClose\n    const handleMenuClose = () => {\n        setAnchorEl(null);\n    };\n\n    const handleLogout = () => {\n        handleMenuClose();\n        auth.logoutUser();\n    }\n\n    // open sort menu\n    const handleSortMenuOpen = (event) => {\n        setAnchorEl(event.currentTarget);\n\n    };\n\n    // sort menu button handlers\n    const handlePublishDateNewestSort = () => {\n        let sortedData = store.idNamePairs.sort((a,b) => (b.createdAt > a.createdAt) ? 1 : -1);\n        store.searchIdPairs(sortedData);\n    }\n\n    const handlePublishDateOldestSort = () => {\n        let sortedData = store.idNamePairs.sort((a,b) => (a.createdAt > b.createdAt) ? 1 : -1);\n        store.searchIdPairs(sortedData);\n    }\n\n    const handleViewsSort = () => {\n        let sortedData = store.idNamePairs.sort((a,b) => (b.views > a.views) ? 1 : -1);\n        store.searchIdPairs(sortedData);\n    }\n\n    const handleLikesSort = () => {\n        let sortedData = store.idNamePairs.sort((a,b) => (b.likes > a.likes) ? 1 : -1);\n        store.searchIdPairs(sortedData);\n    }\n\n    const handleDislikesSort= () => {\n        let sortedData = store.idNamePairs.sort((a,b) => (b.dislikes > a.dislikes) ? 1 : -1);\n        store.searchIdPairs(sortedData);\n    }\n\n    const handleSearchClick= (event) => {\n        if (event.key === 'Enter'){\n            console.log(viewOpen);\n            if (viewOpen == \"yourListsView\"){\n                if (event.target.value == \"\"){\n                    store.loadIdNamePairs();\n                }else{\n                    let filteredList = store.idNamePairs.filter(pair => pair.name.includes(event.target.value));\n                    console.log(filteredList);\n                    store.searchIdPairs(filteredList);\n                }\n            }\n            if (viewOpen == \"allListsView\"){\n                if (event.target.value == \"\"){\n                    store.loadAllListsArray();\n                }else{\n                    let filteredList = store.idNamePairs.filter(pair => pair.name.includes(event.target.value));\n                    console.log(filteredList);\n                    store.searchIdPairs(filteredList);\n                }\n            }\n            if (viewOpen == \"usersListsView\"){\n                if (event.target.value == \"\"){\n                    store.loadAllListsArray();\n                }else{\n                    store.loadUserListsArray(event.target.value);\n                }\n            }\n        }\n    }\n\n    // button click handlers\n    const handleHomeViewClick = () => {\n        setViewOpen(\"yourListsView\");\n        store.loadIdNamePairs();\n        setHomeAnchorEl(\"\");\n        setAllListsAnchorEl(null);\n        setUserListsAnchorEl(null);\n        setComListsAnchorEl(null);\n\n    }\n\n    const handleAllListsViewClick = () => {\n        setViewOpen(\"allListsView\");\n        store.loadAllListsArray();\n        setHomeAnchorEl(null);\n        setAllListsAnchorEl(\"\");\n        setUserListsAnchorEl(null);\n        setComListsAnchorEl(null);\n\n    }\n\n    const handleUserListViewClick = () => {\n        setViewOpen(\"usersListsView\");\n        setHomeAnchorEl(null);\n        setAllListsAnchorEl(null);\n        setUserListsAnchorEl(\"\");\n        setComListsAnchorEl(null);\n    }\n\n    const handleComListsViewClick = () => {\n        setViewOpen(\"comListsView\");\n        setHomeAnchorEl(null);\n        setAllListsAnchorEl(null);\n        setUserListsAnchorEl(null);\n        setComListsAnchorEl(\"\");\n    }\n\n    const menuId = 'primary-search-account-menu';\n\n    const loggedInMenu =\n        <Menu\n            anchorEl={anchorEl}\n            anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'right',\n            }}\n            id={menuId}\n            keepMounted\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            open={isMenuOpen}\n            onClose={handleMenuClose}\n        >\n            <MenuItem onClick={handlePublishDateNewestSort}>Publish Date (Newest)</MenuItem>\n            <MenuItem onClick={handlePublishDateOldestSort}>Publish Date (Oldest)</MenuItem>\n            <MenuItem onClick={handleViewsSort}>Views</MenuItem>\n            <MenuItem onClick={handleLikesSort}>Likes</MenuItem>\n            <MenuItem onClick={handleDislikesSort}>Dislikes</MenuItem>\n\n        </Menu>\n\n    let editToolbar = \"\";\n    let menu = loggedInMenu;\n\n    return (\n        <Box sx={{ flexGrow: 1 }}>\n            <AppBar position=\"static\" color='transparent'>\n                <Toolbar>\n                    <Tooltip title=\"Your lists, your home\">\n                    <Box sx={{ flexGrow: .02 }} >\n                        <IconButton onClick={handleHomeViewClick} >\n                            <HomeIcon fontSize='large' style={isHomeClicked ? {color:\"#000000\"} : {color:\"default\"}} />\n                        </IconButton>\n                    </Box>\n                    </Tooltip>\n\n                    <Tooltip title=\"See all lists around the world\">\n                    <Box sx={{ flexGrow: .02 }}>\n                        <IconButton onClick={handleAllListsViewClick} >\n                            <GroupIcon fontSize='large'/>\n                        </IconButton>\n                    </Box>\n                    </Tooltip>\n\n                    <Tooltip title=\"Search a user's email to see their lists\">\n                    <Box  sx={{ flexGrow: .02 }}>\n                            <IconButton onClick={handleUserListViewClick}>\n                                <PersonOutlineIcon fontSize='large'/>\n                            </IconButton>\n                    </Box>\n                    </Tooltip>\n\n                    <Tooltip title=\"Search a list name to see a ranking of everyone's list items\">\n                    <Box sx={{ flexGrow: .02 }}>\n                        <IconButton onClick={handleComListsViewClick}>\n                            <FunctionsIcon fontSize='large'/>\n                        </IconButton>\n                    </Box>\n                    </Tooltip>\n                    <Search onKeyDown={handleSearchClick}>\n                        <SearchIconWrapper>\n                            <SearchIcon />\n                        </SearchIconWrapper>\n                        <StyledInputBase\n                            placeholder=\"Search…\"\n                            inputProps={{ 'aria-label': 'search' }}\n                        />\n                    </Search>\n                    <Box sx={{ flexGrow: 1 }}>{editToolbar}</Box>\n                    <Box sx={{ display: { xs: 'none', md: 'flex' } }} onClick={handleSortMenuOpen}>\n                        <IconButton\n                            size=\"large\"\n                            edge=\"end\"\n                            aria-label=\"account of current user\"\n                            aria-controls={menuId}\n                            aria-haspopup=\"true\"\n                            color=\"inherit\"\n                        >\n                            <Box sx={{ fontWeight: 'bold', fontSize: 15, p: 1, flexGrow: .5 }}>SORT BY</Box>\n                            <SortIcon />\n                        </IconButton>\n                    </Box>\n                </Toolbar>\n            </AppBar>\n            {\n                menu\n            }\n        </Box>\n    );\n}\n","import React, { useContext, useEffect } from 'react'\nimport { GlobalStoreContext } from '../store'\nimport ListCard from './ListCard.js'\nimport MUIDeleteModal from './MUIDeleteModal'\n\nimport MenuBar from './MenuBar.js';\nimport AddIcon from '@mui/icons-material/Add';\nimport Fab from '@mui/material/Fab';\nimport List from '@mui/material/List';\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport AuthContext from '../auth';\n/*\n    This React component lists all the top5 lists in the UI.\n\n    @author McKilla Gorilla\n*/\nconst HomeScreen = () => {\n    const { store } = useContext(GlobalStoreContext);\n    const { auth } = useContext(AuthContext);\n\n    useEffect(() => {\n            store.loadIdNamePairs();\n    }, []);\n\n    function handleCreateNewList() {\n        store.createNewList();\n    }\n    let listCard = \"\";\n    let userIdNamePairs = [];\n\n    if (store.idNamePairs) {\n        console.log(store.idNamePairs);\n        console.log(store.viewOpen);\n        listCard =\n            <List sx={{ width: '98%', left: '2%', bgcolor: '#fff5de'}}>\n            {\n                store.idNamePairs.map((pair) => (\n                    <ListCard\n                        key={pair._id}\n                        idNamePair={pair}\n                        selected={false}\n                        variant=\"outlined\"\n                    />\n                ))\n            }\n            </List>;\n    }\n    return (\n        <Grid container direction={'row'}>\n        <MenuBar/>\n        <div id=\"top5-list-selector\">\n            <div id=\"list-selector-list\">\n                {\n                    listCard\n                }\n                <MUIDeleteModal />\n            </div>\n        </div>\n            <div id=\"list-selector-heading\" onClick={handleCreateNewList}>\n            <Fab\n                color=\"primary\"\n                aria-label=\"add\"\n                id=\"add-list-button\"\n            >\n                <AddIcon />\n            </Fab>\n            <Typography variant=\"h3\">Add List</Typography>\n        </div>\n    </Grid>)\n}\n\nexport default HomeScreen;\n","import Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport { Link } from 'react-router-dom'\n\nexport default function SplashScreen() {\n    const handleLogin = () => {\n\n    }\n    const handleRegister = () => {\n\n    }\n    const handleGuest = () => {\n\n    }\n    return (\n        <div id=\"splash-screen\">\n            Top5Lister<br/>\n            <div id=\"splash-menu\">\n                <Grid container direction=\"column\">\n                <Box sx={{p:.1}}>\n                    <Button variant=\"contained\"><Link underline=\"none\" to='/login/'>Login</Link></Button>\n                </Box>\n                <Box sx={{p:.1}}>\n                    <Button variant=\"contained\" onPress={handleRegister}><Link underline=\"none\" to='/register/'>Register</Link></Button>\n                </Box>\n                </Grid>\n            </div>\n        </div>\n    )\n}\n","import { useContext } from 'react'\nimport HomeScreen from './HomeScreen'\nimport SplashScreen from './SplashScreen'\nimport AuthContext from '../auth'\n\nexport default function HomeWrapper() {\n    const { auth } = useContext(AuthContext);\n    console.log(\"HomeWrapper auth.loggedIn: \" + auth.loggedIn);\n    \n    if (auth.loggedIn)\n        return <HomeScreen />\n    else\n        return <SplashScreen />\n}","import Link from '@mui/material/Link';\nimport Typography from '@mui/material/Typography';\n\nexport default function Copyright(props) {\n    return (\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\n            {'Copyright © '}\n            <Link color=\"inherit\" href=\"/\">\n                The Top 5 Lister\n            </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}","import { useContext } from 'react';\nimport AuthContext from '../auth'\n\nimport Copyright from './Copyright'\n\nimport Avatar from '@mui/material/Avatar';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Checkbox from '@mui/material/Checkbox';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Grid from '@mui/material/Grid';\nimport Link from '@mui/material/Link';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport Paper from '@mui/material/Paper';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\n\nexport default function LoginScreen() {\n    const { auth } = useContext(AuthContext);\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const formData = new FormData(event.currentTarget);\n        auth.loginUser(\n            formData.get('email'),\n            formData.get('password')\n        );\n\n    };\n\n    return (\n        <Grid container component=\"main\" sx={{ height: '100vh' }}>\n            <CssBaseline />\n            <Grid\n                item\n                xs={false}\n                sm={4}\n                md={7}\n                sx={{\n                    backgroundImage: 'url(https://source.unsplash.com/random)',\n                    backgroundRepeat: 'no-repeat',\n                    backgroundColor: (t) =>\n                        t.palette.mode === 'light' ? t.palette.grey[50] : t.palette.grey[900],\n                    backgroundSize: 'cover',\n                    backgroundPosition: 'center',\n                }}\n            />\n            <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n                <Box\n                    sx={{\n                        my: 8,\n                        mx: 4,\n                        display: 'flex',\n                        flexDirection: 'column',\n                        alignItems: 'center',\n                    }}\n                >\n                    <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n                        <LockOutlinedIcon />\n                    </Avatar>\n                    <Typography component=\"h1\" variant=\"h5\">\n                        Sign in\n                    </Typography>\n                    <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{ mt: 1 }}>\n                        <TextField\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            id=\"email\"\n                            label=\"Email Address\"\n                            name=\"email\"\n                            autoComplete=\"email\"\n                            autoFocus\n                        />\n                        <TextField\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            name=\"password\"\n                            label=\"Password\"\n                            type=\"password\"\n                            id=\"password\"\n                            autoComplete=\"current-password\"\n                        />\n                        <FormControlLabel\n                            control={<Checkbox value=\"remember\" color=\"primary\" />}\n                            label=\"Remember me\"\n                        />\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            sx={{ mt: 3, mb: 2 }}\n                        >\n                            Sign In\n                        </Button>\n                        <Grid container>\n                            <Grid item>\n                                <Link href=\"/register/\" variant=\"body2\">\n                                    {\"Don't have an account? Sign Up\"}\n                                </Link>\n                            </Grid>\n                        </Grid>\n                        <Copyright sx={{ mt: 5 }} />\n                    </Box>\n                </Box>\n            </Grid>\n        </Grid>\n    );\n}\n","import { useContext } from 'react';\nimport AuthContext from '../auth'\nimport Copyright from './Copyright'\n\nimport Avatar from '@mui/material/Avatar';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Container from '@mui/material/Container';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Grid from '@mui/material/Grid';\nimport Link from '@mui/material/Link';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport TextField from '@mui/material/TextField';\nimport Typography from '@mui/material/Typography';\n\nexport default function RegisterScreen() {\n    const { auth } = useContext(AuthContext);\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const formData = new FormData(event.currentTarget);\n        auth.registerUser(\n            formData.get('firstName'),\n            formData.get('lastName'),\n            formData.get('email'),\n            formData.get('password'),\n            formData.get('passwordVerify')\n        );\n    };\n\n    return (\n            <Container component=\"main\" maxWidth=\"xs\">\n                <CssBaseline />\n                <Box\n                    sx={{\n                        marginTop: 8,\n                        display: 'flex',\n                        flexDirection: 'column',\n                        alignItems: 'center',\n                    }}\n                >\n                    <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n                        <LockOutlinedIcon />\n                    </Avatar>\n                    <Typography component=\"h1\" variant=\"h5\">\n                        Sign up\n                    </Typography>\n                    <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{ mt: 3 }}>\n                        <Grid container spacing={2}>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    autoComplete=\"fname\"\n                                    name=\"firstName\"\n                                    required\n                                    fullWidth\n                                    id=\"firstName\"\n                                    label=\"First Name\"\n                                    autoFocus\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={6}>\n                                <TextField\n                                    required\n                                    fullWidth\n                                    id=\"lastName\"\n                                    label=\"Last Name\"\n                                    name=\"lastName\"\n                                    autoComplete=\"lname\"\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextField\n                                    required\n                                    fullWidth\n                                    id=\"email\"\n                                    label=\"Email Address\"\n                                    name=\"email\"\n                                    autoComplete=\"email\"\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextField\n                                    required\n                                    fullWidth\n                                    name=\"password\"\n                                    label=\"Password\"\n                                    type=\"password\"\n                                    id=\"password\"\n                                    autoComplete=\"new-password\"\n                                />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <TextField\n                                    required\n                                    fullWidth\n                                    name=\"passwordVerify\"\n                                    label=\"Password Verify\"\n                                    type=\"password\"\n                                    id=\"passwordVerify\"\n                                    autoComplete=\"new-password\"\n                                />\n                            </Grid>\n                        </Grid>\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            sx={{ mt: 3, mb: 2 }}\n                        >\n                            Sign Up\n                        </Button>\n                        <Grid container justifyContent=\"flex-end\">\n                            <Grid item>\n                                <Link href=\"/login/\" variant=\"body2\">\n                                    Already have an account? Sign in\n                                </Link>\n                            </Grid>\n                        </Grid>\n                    </Box>\n                </Box>\n                <Copyright sx={{ mt: 5 }} />\n            </Container>\n    );\n}","import { useContext } from 'react'\nimport { GlobalStoreContext } from '../store'\nimport { Typography } from '@mui/material'\n\n/*\n    Our Status bar React component goes at the bottom of our UI.\n    \n    @author McKilla Gorilla\n*/\nfunction Statusbar() {\n    const { store } = useContext(GlobalStoreContext);\n    let text =\"\";\n    if (store.currentList)\n        text = store.currentList.name;\n    return (\n        <div id=\"top5-statusbar\">\n            <Typography variant=\"h4\">{text}</Typography>\n        </div>\n    );\n}\n\nexport default Statusbar;","import { React, useContext, useState } from \"react\";\nimport { GlobalStoreContext } from '../store'\nimport Box from '@mui/material/Box';\nimport EditIcon from '@mui/icons-material/Edit';\nimport IconButton from '@mui/material/IconButton';\nimport ListItem from '@mui/material/ListItem';\nimport TextField from '@mui/material/TextField';\n\n/*\n    This React component represents a single item in our\n    Top 5 List, which can be edited or moved around.\n\n    @author McKilla Gorilla\n*/\nfunction Top5Item(props) {\n    const { store } = useContext(GlobalStoreContext);\n    const [editActive, setEditActive] = useState(false);\n    const [draggedTo, setDraggedTo] = useState(0);\n    const [text, setText] = useState(\"\");\n\n    function handleDragStart(event, targetId) {\n        event.dataTransfer.setData(\"item\", targetId);\n    }\n\n    function handleDragOver(event) {\n        event.preventDefault();\n    }\n\n    function handleDragEnter(event) {\n        event.preventDefault();\n        console.log(\"entering\");\n        setDraggedTo(true);\n    }\n\n    function handleDragLeave(event) {\n        event.preventDefault();\n        console.log(\"leaving\");\n        setDraggedTo(false);\n    }\n\n    function handleDrop(event, targetId) {\n        event.preventDefault();\n        let sourceId = event.dataTransfer.getData(\"item\");\n        sourceId = sourceId.substring(sourceId.indexOf(\"-\") + 1);\n        setDraggedTo(false);\n\n        console.log(\"handleDrop (sourceId, targetId): ( \" + sourceId + \", \" + targetId + \")\");\n\n        // UPDATE THE LIST\n        store.addMoveItemTransaction(sourceId, targetId);\n    }\n\n    function handleKeyPress(event) {\n        if (event.code === \"Enter\") {\n            let index = event.target.id.substring(\"list-\".length);\n            let text = event.target.value;\n            store.addUpdateItemTransaction(index-1, text);\n            toggleEdit();\n        }\n    }\n\n    function handleToggleEdit(event) {\n        event.stopPropagation();\n        toggleEdit();\n    }\n\n    function handleUpdateText(event) {\n        setText(event.target.value);\n    }\n\n    function toggleEdit() {\n        let newActive = !editActive;\n        if (newActive) {\n            store.setIsItemEditActive();\n        }\n        setEditActive(newActive);\n    }\n\n    let editStatus = false;\n    if (store.isItemEditActive) {\n        editStatus = true;\n    }\n    let { index } = props;\n\n    let itemClass = \"top5-item\";\n    if (draggedTo) {\n        itemClass = \"top5-item-dragged-to\";\n    }\n\n    let cardElement =\n            <ListItem\n                id={'item-' + (index+1)}\n                className={itemClass}\n                onDragStart={(event) => {\n                    handleDragStart(event, (index+1))\n                }}\n                onDragOver={(event) => {\n                    handleDragOver(event, (index+1))\n                }}\n                onDragEnter={(event) => {\n                    handleDragEnter(event, (index+1))\n                }}\n                onDragLeave={(event) => {\n                    handleDragLeave(event, (index+1))\n                }}\n                onDrop={(event) => {\n                    handleDrop(event, (index+1))\n                }}\n                draggable=\"true\"\n                sx={{ display: 'flex', p: 1 }}\n                style={{ width: '100%' }}\n                style={{\n                    fontSize: '48pt'\n                }}\n            >\n            <Box sx={{ p: 1 }}>\n                <IconButton onClick={handleToggleEdit} aria-label='edit'>\n                    <EditIcon style={{fontSize:'48pt'}}  />\n                </IconButton>\n            </Box>\n                <Box sx={{ p: 1, flexGrow: 1 }}>{props.text}</Box>\n            </ListItem>\n\n    if (editActive) {\n        cardElement =\n            <TextField\n                margin=\"normal\"\n                required\n                fullWidth\n                id={\"item-\" + (index+1)}\n                label={\"Item #\" + (index+1)}\n                name=\"item\"\n                autoComplete=\"Top 5 List Item\"\n                className='top5-item'\n                onKeyPress={handleKeyPress}\n                onChange={handleUpdateText}\n                defaultValue={props.text}\n                inputProps={{style: {fontSize: 48}}}\n                InputLabelProps={{style: {fontSize: 24}}}\n                autoFocus\n            />\n    }\n    return (\n        cardElement\n    );\n}\n\nexport default Top5Item;\n","import { useContext } from 'react'\nimport Top5Item from './Top5Item.js'\nimport List from '@mui/material/List';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport ThumbDownIcon from '@mui/icons-material/ThumbDown';\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\nimport Card from '@mui/material/Card';\nimport Box from '@mui/material/Box';\n\nimport { Typography } from '@mui/material'\nimport { GlobalStoreContext } from '../store/index.js'\n/*\n    This React component lets us edit a loaded list, which only\n    happens when we are on the proper route.\n\n    @author McKilla Gorilla\n*/\nfunction WorkspaceScreen() {\n    const { store } = useContext(GlobalStoreContext);\n\n    let editItems = \"\";\n    let commentsCard= \"\";\n    if (store.currentList) {\n        editItems =\n            <List id=\"edit-items\" sx={{ width: '100%', bgcolor: 'background.paper' }}>\n                {\n                    store.currentList.items.map((item, index) => (\n                        <Top5Item\n                            key={'top5-item-' + (index+1)}\n                            text={item}\n                            index={index}\n                        />\n                    ))\n                }\n            </List>;\n\n        commentsCard =\n            <List sx={{ width: '98%', left: '2%', bgcolor: '#fff5de'}}>\n            {\n                store.currentList.comments.map((item, index) => (\n                    <Top5Item\n                        text={item}\n                        index={index}\n                    />\n                ))\n            }\n            </List>;\n    }\n    return (\n        <div id=\"top5-workspace\">\n            <div id=\"workspace-edit\">\n                <div id=\"edit-numbering\">\n                    <div className=\"item-number\"><Typography variant=\"h3\">1.</Typography></div>\n                    <div className=\"item-number\"><Typography variant=\"h3\">2.</Typography></div>\n                    <div className=\"item-number\"><Typography variant=\"h3\">3.</Typography></div>\n                    <div className=\"item-number\"><Typography variant=\"h3\">4.</Typography></div>\n                    <div className=\"item-number\"><Typography variant=\"h3\">5.</Typography></div>\n                </div>\n                {editItems}\n            </div>\n        </div>\n    )\n}\n\nexport default WorkspaceScreen;\n","import './App.css';\nimport { React } from 'react'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport { AuthContextProvider } from './auth';\nimport { GlobalStoreContextProvider } from './store'\nimport {\n    AppBanner,\n    HomeWrapper,\n    LoginScreen,\n    RegisterScreen,\n    Statusbar,\n    WorkspaceScreen\n} from './components'\n/*\n    This is our application's top-level component.\n\n    @author McKilla Gorilla\n*/\n/*\n  This is the entry-point for our application. Notice that we\n  inject our store into all the components in our application.\n\n  @author McKilla Gorilla\n*/\nconst App = () => {\n    return (\n        <BrowserRouter>\n            <AuthContextProvider>\n                <GlobalStoreContextProvider>\n                    <AppBanner />\n                    <Switch>\n                        <Route path=\"/\" exact component={HomeWrapper} />\n                        <Route path=\"/login/\" exact component={LoginScreen} />\n                        <Route path=\"/register/\" exact component={RegisterScreen} />\n                        <Route path=\"/top5list/:id\" exact component={WorkspaceScreen} />\n                    </Switch>\n                </GlobalStoreContextProvider>\n            </AuthContextProvider>\n        </BrowserRouter>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n//import { AuthContextProvider } from './auth';\nimport reportWebVitals from './reportWebVitals';\n/*\n  This is the entry-point for our application. Notice that we\n  inject our store into all the components in our application.\n  \n  @author McKilla Gorilla\n*/\n/*import { GlobalStoreContext, useGlobalStore } from './store'\nconst AppWrapper = () => {\n  const store = useGlobalStore();\n  return (\n    <GlobalStoreContext.Provider value={store}>\n      <App />\n    </GlobalStoreContext.Provider>\n  )\n}*/\nReactDOM.render(\n  <React.StrictMode>  \n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}